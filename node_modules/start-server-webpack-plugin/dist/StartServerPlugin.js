'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _cluster = require('cluster');

var _cluster2 = _interopRequireDefault(_cluster);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var StartServerPlugin = function () {
  function StartServerPlugin(options) {
    _classCallCheck(this, StartServerPlugin);

    if (options == null) {
      options = {};
    }
    if (typeof options === 'string') {
      options = { name: options };
    }
    this.options = options;
    this.afterEmit = this.afterEmit.bind(this);
    this.apply = this.apply.bind(this);
    this.startServer = this.startServer.bind(this);

    this.worker = null;
  }

  _createClass(StartServerPlugin, [{
    key: '_getArgs',
    value: function _getArgs() {
      var options = this.options;

      var execArgv = (options.nodeArgs || []).concat(process.execArgv);
      if (options.args) {
        execArgv.push('--');
        execArgv.push.apply(execArgv, options.args);
      }
      return execArgv;
    }
  }, {
    key: 'afterEmit',
    value: function afterEmit(compilation, callback) {
      if (this.worker && this.worker.isConnected()) {
        return callback();
      }

      this.startServer(compilation, callback);
    }
  }, {
    key: 'apply',
    value: function apply(compiler) {
      compiler.plugin("after-emit", this.afterEmit);
    }
  }, {
    key: 'startServer',
    value: function startServer(compilation, callback) {
      var _this = this;

      var options = this.options;

      var name = void 0;
      var names = Object.keys(compilation.assets);
      if (options.name) {
        name = options.name;
        if (!compilation.assets[name]) {
          console.error("Entry " + name + " not found. Try one of: " + names.join(" "));
        }
      } else {
        name = names[0];
        if (names.length > 1) {
          console.log("More than one entry built, selected " + name + ". All names: " + names.join(" "));
        }
      }
      var existsAt = compilation.assets[name].existsAt;

      var execArgv = this._getArgs();

      _cluster2.default.setupMaster({ exec: existsAt, execArgv: execArgv });

      _cluster2.default.on("online", function (worker) {
        _this.worker = worker;
        callback();
      });

      _cluster2.default.fork();
    }
  }]);

  return StartServerPlugin;
}();

exports.default = StartServerPlugin;


module.exports = StartServerPlugin;